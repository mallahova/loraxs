
 55%|████████████████████████████████████████████████▊                                        | 22001/40080 [00:00<00:00, 25621.60it/s]


 55%|██████████████████████████████████████████████████                                         | 22023/40080 [00:16<00:18, 951.93it/s]

 55%|██████████████████████████████████████████████████                                         | 22044/40080 [00:30<00:53, 339.75it/s][INFO|trainer.py:3614] 2024-12-05 15:08:00,746 >> ***** Running Evaluation *****
[INFO|trainer.py:3616] 2024-12-05 15:08:00,747 >>   Num examples = 408
[INFO|trainer.py:3619] 2024-12-05 15:08:00,747 >>   Batch size = 8





 94%|████████████████████████████████████████████████████████████████████████████████████████████▏     | 48/51 [00:11<00:00,  4.26it/s]

100%|██████████████████████████████████████████████████████████████████████████████████████████████████| 51/51 [00:11<00:00,  4.27it/s]
Computing accuracy for k=11
Computing accuracy for k=12
Computing accuracy for k=13
Computing accuracy for k=14
Computing accuracy for k=15
Computing accuracy for k=16
Computing accuracy for k=17
Computing accuracy for k=18
Computing accuracy for k=19
Computing accuracy for k=20
Computing accuracy for k=21
Computing accuracy for k=22
Computing accuracy for k=23
Computing accuracy for k=24
Computing accuracy for k=25
{'accuracy': 0.8553921568627451, 'f1': 0.8981001727115717, 'combined_score': 0.8767461647871584, 'accuracy_10': 0.8553921568627451, 'accuracy_11': 0.8553921568627451, 'accuracy_12': 0.8553921568627451, 'accuracy_13': 0.8553921568627451, 'accuracy_14': 0.8553921568627451, 'accuracy_15': 0.8553921568627451, 'accuracy_16': 0.8553921568627451, 'accuracy_17': 0.8553921568627451, 'accuracy_18': 0.8553921568627451, 'accuracy_19': 0.8553921568627451, 'accuracy_20': 0.8553921568627451, 'accuracy_21': 0.8553921568627451, 'accuracy_22': 0.8553921568627451, 'accuracy_23': 0.8553921568627451, 'accuracy_24': 0.8553921568627451, 'accuracy_25': 0.8553921568627451}

{'eval_loss': 0.8314821720123291, 'eval_accuracy': 0.8553921568627451, 'eval_f1': 0.8981001727115717, 'eval_combined_score': 0.8767461647871584, 'eval_accuracy_10': 0.8553921568627451, 'eval_accuracy_11': 0.8553921568627451, 'eval_accuracy_12': 0.8553921568627451, 'eval_accuracy_13': 0.8553921568627451, 'eval_accuracy_14': 0.8553921568627451, 'eval_accuracy_15': 0.8553921568627451, 'eval_accuracy_16': 0.8553921568627451, 'eval_accuracy_17': 0.8553921568627451, 'eval_accuracy_18': 0.8553921568627451, 'eval_accuracy_19': 0.8553921568627451, 'eval_accuracy_20': 0.8553921568627451, 'eval_accuracy_21': 0.8553921568627451, 'eval_accuracy_22': 0.8553921568627451, 'eval_accuracy_23': 0.8553921568627451, 'eval_accuracy_24': 0.8553921568627451, 'eval_accuracy_25': 0.8553921568627451, 'eval_runtime': 203.4938, 'eval_samples_per_second': 2.005, 'eval_steps_per_second': 0.251, 'epoch': 66.0}


 55%|██████████████████████████████████████████████████▋                                         | 22069/40080 [04:11<14:16, 21.03it/s]


 55%|██████████████████████████████████████████████████▋                                         | 22089/40080 [04:25<17:22, 17.26it/s]


 55%|██████████████████████████████████████████████████▊                                         | 22111/40080 [04:41<23:56, 12.51it/s]



 55%|██████████████████████████████████████████████████▊                                         | 22132/40080 [04:56<35:30,  8.42it/s]

 55%|██████████████████████████████████████████████████▊                                         | 22140/40080 [05:01<35:29,  8.42it/s]Traceback (most recent call last):
  File "my_experiments/tasks/task1/rank_dropout.py", line 1042, in <module>
    main()
  File "my_experiments/tasks/task1/rank_dropout.py", line 931, in main
    train_result = trainer.train(resume_from_checkpoint=checkpoint)
  File "/home/mallahova/miniconda3/envs/loraxs/lib/python3.8/site-packages/transformers/trainer.py", line 1859, in train
    return inner_training_loop(
  File "/home/mallahova/miniconda3/envs/loraxs/lib/python3.8/site-packages/transformers/trainer.py", line 2203, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
  File "/home/mallahova/miniconda3/envs/loraxs/lib/python3.8/site-packages/transformers/trainer.py", line 3147, in training_step
    self.accelerator.backward(loss)
  File "/home/mallahova/miniconda3/envs/loraxs/lib/python3.8/site-packages/accelerate/accelerator.py", line 1966, in backward
    loss.backward(**kwargs)
  File "/home/mallahova/miniconda3/envs/loraxs/lib/python3.8/site-packages/torch/_tensor.py", line 522, in backward
    torch.autograd.backward(
  File "/home/mallahova/miniconda3/envs/loraxs/lib/python3.8/site-packages/torch/autograd/__init__.py", line 266, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt